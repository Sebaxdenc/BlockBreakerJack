/* Implements a graphical "breaker"
    The breaker has top-left x and y coordinates, a length, and a direction. */

class Breaker {
    field int x, y; // screen location of the top-left corner of this breaker
    field int length; // length of this breaker, in pixels


    // ------------- Memory methods --------------

    /** Constructs and draws a new breaker with a given location and size. */
    constructor Breaker new(int ax, int ay, int alength) {
        let x = ax;
        let y = ay;
        let length = alength;
        do draw();
        return this;
    }

    /** Disposes this breaker. */
    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }

    // ------------ Visual Methods --------------

    /** Draws this breaker in its current (x,y) location */
    method void draw() {
        // Draws the breaker using the color black
        do Screen.setColor(true);
        do Screen.drawRectangle(x, y, x + length, y + 5);

        return;
    }

    /** Erases this breaker. */
    method void erase() {
        // Draws the breaker using the color white (background color)
        do Screen.setColor(false);
        do Screen.drawRectangle(x, y, x + length, y + 5);
        return;
    }

    /** Increase the length of this breaker by 2 pixels (if possible). */
    method void incLength() {
        if ((x + length) < 510) {
            do erase();
            let length = length + 2;
            do draw();
        }
        return;
    }

    /** Decrease the length of this breaker by 2 pixels (if possible). */
    method void decLength() {
        if (length > 2) {
            do erase();
            let length = length - 2;
            do draw();
        }
        return;
    }

    /** Moves this breaker left by 2 pixels (if possible). */
    method void moveLeft() {
        if (x > 10) {
            do erase();
            let x = x - 2;
            do draw();
        }
        return;
    }
    
    /** Moves this breaker right by 2 pixels (if possible). */
    method void moveRight() {
        if ((x + length) < 501) {
            do erase();
            let x = x + 2;
            do draw();
        }
        return;
    }

    // --------------- Collision methods --------------

    method void breakerCollisionCheck(Ball ball){
		var int ballX, ballY, ballRadius, fifth;
		
		let ballX = ball.getX();
		let ballY = ball.getY();
		let ballRadius = ball.getRadius();
		
		let fifth = (length / 5); //Divide bat in 3 parts (left = left, middle = up, right = right)
		
        if (((ballY + ballRadius) + 1) > y) {
            if (((ballX - ballRadius) + 1) > x) {
            if (ballX < (x + (1 * fifth))) {
                do ball.collideWithBreaker(1);
                return;
            }
            if (ballX < (x + (2 * fifth))) {
                do ball.collideWithBreaker(2);
                return;
            }
            if (ballX < (x + (3 * fifth))) {
                do ball.collideWithBreaker(3);
                return;
            }
            if (ballX < (x + (4 * fifth))) {
                do ball.collideWithBreaker(4);
                return;
            }
            if (((ballX - ballRadius) - 1) < (x + (5 * fifth))) {
                do ball.collideWithBreaker(5);
                return;
            }
            }
        }

		return;
	}

    // --------------- Getters ----------------

    method int getX() {
        return x;
    }
    method int getY() {
        return y;
    }
    method int getLength() {
        return length;
    }
}