/* Implements a graphical "ball"
    The ball has top-left x and y coordinates, a radius, and a direction x and y. */

class Ball {
    field int x, y, radius; // screen location of this ball
    field int dx, dy; // the ball's current direction

    // ------------- Memory methods --------------

    /** Constructs and draws a new ball with a given location and size. */
    constructor Ball new(int ax, int ay, int aradius, int adx, int ady) {
        let dx = adx; // the ball's current direction in x axis
        let dy = ady; // the ball's current direction in y axis
        let x = ax;
        let y = ay;
        let radius = aradius;
        do draw();
        return this;
    }

    /** Disposes this ball. */
    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }

    // ------------ Visual Methods --------------

    method void ballReturn(int ax, int ay, int adx, int ady) {
        do erase();
        let x = ax;
        let y = ay;
        let dx = adx; // the ball's current direction in x axis
        let dy = ady; // the ball's current direction in y axis
        do draw();
        return;
    }

    /** Draws this ball in its current (x,y) location */
    method void draw() {
        // Draws the ball using the color black
        do Screen.setColor(true);
        do Screen.drawCircle(x, y, radius);
        return;
    }

    /** Erases this ball. */
    method void erase() {
        // Draws the ball using the color white (background color)
        do Screen.setColor(false);
        do Screen.drawCircle(x, y, radius);
        return;
    }

    method void move() {

        do erase();
        let x = x + dx;
        let y = y + dy;


        do draw();
        return;
    }
    
    /** Increase the radius of this ball by 2 pixels (if possible). */
    method void incRadius() {
        if (radius < 179) {
            do erase();
            let radius = radius + 2;
            do draw();
        }
        return;
    }

    /** Decrease the radius of this ball by 2 pixels (if possible). */
    method void decRadius() {
        if (radius > 3) {
            do erase();
            let radius = radius - 2;
            do draw();
        }
        return;
    }

    // ------------- Game Logic Methods --------------

    method boolean handleCollision(int breakerX, int breakerY, int breakerLength) {
        //right wall
        if((x + radius > 500) | (x + radius = 500)){
            let dx = -1;
        }
        // left wall
        if((x - radius < 11) | (x - radius = 11)){
            let dx = 1;
        }
        // top wall
        if((y - radius < 11) | (y - radius = 11)){
            let dy = -dy;
        }
        // bottom wall
        if((y + radius > 250) | (y + radius = 250)){
            return false; // ball is lost
        }

        return true;

    }
    
    method void collideWithBlock(int section){
        // 1 = left | right 
        // 2 = top | bottom
        if(section = 1){
            let dx = -dx; // reverse the x direction of the ball
        }
        if(section = 2){
            let dy = -dy; // reverse the y direction of the ball
        }
        return;
    }

    method void collideWithBreaker(int section){
		let dy = -1; // reverse the y direction of the ball
		
		if(section = 1){ // 30°
			let dx = -2;
		}
		if(section = 2){ // 45°
			let dx = -1; 
		}
		if(section = 3){ // 90°
			let dx = 0;
		}
        if(section = 4){ //45°
			let dx = 1; 
        }
        if(section = 5){ // 30°
			let dx = 2;
        }

		return;
	}

    // --------------- Getters ----------------
    
    method int getX() {
        return x;
    }
    method int getY() {
        return y;
    }
    method int getRadius() {
        return radius;
    }

}